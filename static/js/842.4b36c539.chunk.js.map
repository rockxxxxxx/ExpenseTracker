{"version":3,"file":"static/js/842.4b36c539.chunk.js","mappings":"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","sources":["component/cards/Card.js","component/loader/Loader.js","component/signup/Signup.js","component/toast/Toast.js","hooks/useFormValidator.js"],"sourcesContent":["import React from \"react\";\r\nimport \"./card.css\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nexport default function Card({ title, children }) {\r\n  const themeDefault = useSelector((state) => state.theme.themeDefault);\r\n  return (\r\n    <div\r\n      className={`card ${themeDefault === true ? \"\" : \"text-white bg-dark\"}`}\r\n    >\r\n      <h5 className=\"card-header\">{title}</h5>\r\n      <div className=\"card-body\">{children}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./loader.css\";\r\n\r\nexport default function Loader({ title }) {\r\n  return (\r\n    <button className=\"btn btn-primary\" type=\"button\" disabled>\r\n      <span\r\n        className=\"spinner-border spinner-border-sm\"\r\n        role=\"status\"\r\n        aria-hidden=\"true\"\r\n      ></span>\r\n      <span className=\"visually-hidden\">{title}...</span>\r\n    </button>\r\n  );\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport useFormValidator from \"../../hooks/useFormValidator\";\r\nimport Card from \"../cards/Card\";\r\nimport { ToasterContext } from \"../context/toasterContext\";\r\nimport Loader from \"../loader/Loader\";\r\nimport Toast from \"../toast/Toast\";\r\nimport \"./signup.css\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst emailValidator = (value) => value.includes(\"@\");\r\nconst passwordValidator = (value) => value.length > 6;\r\n\r\nexport default function Signup() {\r\n  const [loader, setLoader] = useState(false);\r\n  const { isMessage, setIsMessage, isToaster, setIsToaster } =\r\n    useContext(ToasterContext);\r\n  const [submitVisible, setSubmitVisible] = useState(true);\r\n  const {\r\n    value: enteredEmail,\r\n    isValid: emailIsValid,\r\n    hasError: emailInputHasError,\r\n    inputChangeHandler: emailChangeHandler,\r\n    onBlurHandler: emailBlurHandler,\r\n    reset: emailReset,\r\n  } = useFormValidator(emailValidator);\r\n\r\n  const {\r\n    value: enteredPaasword,\r\n    isValid: passwordIsValid,\r\n    hasError: passwordInputHasError,\r\n    inputChangeHandler: passwordChangeHandler,\r\n    onBlurHandler: passwordBlurHandler,\r\n    reset: passwordReset,\r\n  } = useFormValidator(passwordValidator);\r\n\r\n  const confirmPassValidator = (value) => enteredPaasword === value;\r\n\r\n  const {\r\n    value: confirmPaasword,\r\n    isValid: confirmpasswordIsValid,\r\n    hasError: confirmpasswordInputHasError,\r\n    inputChangeHandler: confirmpasswordChangeHandler,\r\n    onBlurHandler: confirmpasswordBlurHandler,\r\n    reset: confirmpasswordReset,\r\n  } = useFormValidator(confirmPassValidator);\r\n\r\n  const themeDefault = useSelector((state) => state.theme.themeDefault);\r\n\r\n  let formIsValid = false;\r\n  if (emailIsValid && passwordIsValid && confirmpasswordIsValid && !loader) {\r\n    formIsValid = true;\r\n  }\r\n  const formValue = {\r\n    email: enteredEmail,\r\n    password: enteredPaasword,\r\n    returnSecureToken: true,\r\n  };\r\n  function onSubmitHandler(event) {\r\n    setSubmitVisible(false);\r\n    setLoader(true);\r\n    event.preventDefault();\r\n    if (formIsValid) {\r\n      setLoader(true);\r\n      fetch(\r\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCJx5BaRP2wpkK7EusD5XYqdvO-F3eTyQs\",\r\n        {\r\n          method: \"POST\",\r\n          body: JSON.stringify(formValue),\r\n          heders: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      ).then((res) => {\r\n        setSubmitVisible(true);\r\n        setLoader(false);\r\n        if (res.ok) {\r\n          setIsMessage({\r\n            message: \"You have successfully registered\",\r\n            type: \"success\",\r\n          });\r\n          setIsToaster(true);\r\n          emailReset();\r\n          passwordReset();\r\n          confirmpasswordReset();\r\n        } else {\r\n          return res.json().then((data) => {\r\n            if (data.error.message === \"EMAIL_EXISTS\") {\r\n              setIsMessage({\r\n                message: \"This email is already registerd\",\r\n                type: \"danger\",\r\n              });\r\n              setIsToaster(true);\r\n            } else {\r\n              setIsMessage({\r\n                message: \"Something went wrong! Please again later\",\r\n                type: \"danger\",\r\n              });\r\n              setIsToaster(true);\r\n            }\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      setSubmitVisible(true);\r\n      setLoader(false);\r\n      console.log(\"not valid\");\r\n      emailBlurHandler();\r\n      passwordBlurHandler();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container signup\">\r\n        <Card title=\"Signup\">\r\n          <form onSubmit={onSubmitHandler}>\r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"email\" className=\"form-label\">\r\n                Email address\r\n              </label>\r\n              <input\r\n                type=\"email\"\r\n                className=\"form-control\"\r\n                id=\"email\"\r\n                aria-describedby=\"emailHelp\"\r\n                value={enteredEmail}\r\n                onChange={emailChangeHandler}\r\n                onBlur={emailBlurHandler}\r\n              />\r\n              <div id=\"signup-error\" className=\"form-text\">\r\n                {emailInputHasError && \"Please enter a valid email address\"}\r\n              </div>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"password\" className=\"form-label\">\r\n                Password\r\n              </label>\r\n              <input\r\n                type=\"password\"\r\n                className=\"form-control\"\r\n                id=\"password\"\r\n                value={enteredPaasword}\r\n                onChange={passwordChangeHandler}\r\n                onBlur={passwordBlurHandler}\r\n              />\r\n              <div id=\"signup-error\" className=\"form-text\">\r\n                {passwordInputHasError &&\r\n                  \"Please enter the password greater than 6 character\"}\r\n              </div>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"confirmPassword\" className=\"form-label\">\r\n                Confirm Password\r\n              </label>\r\n              <input\r\n                type=\"password\"\r\n                className=\"form-control\"\r\n                id=\"confirrm Password\"\r\n                value={confirmPaasword}\r\n                onChange={confirmpasswordChangeHandler}\r\n                onBlur={confirmpasswordBlurHandler}\r\n              />\r\n              <div id=\"signup-error\" className=\"form-text\">\r\n                {confirmpasswordInputHasError && \"Password not matched\"}\r\n              </div>\r\n            </div>\r\n\r\n            {submitVisible && (\r\n              <button type=\"submit\" className=\"btn btn-primary\">\r\n                Submit\r\n              </button>\r\n            )}\r\n            {loader && <Loader />}\r\n          </form>\r\n        </Card>\r\n        {isToaster && (\r\n          <Toast message={isMessage.message} type={isMessage.type} />\r\n        )}\r\n      </div>\r\n      <div\r\n        className=\"mx-auto\"\r\n        style={{ textAlign: \"center\", paddingTop: \"3rem\" }}\r\n      >\r\n        <span className=\"border border-primary p-3\">\r\n          Already have an account? <NavLink to=\"/login\">Login</NavLink>\r\n        </span>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { ToasterContext } from \"../context/toasterContext\";\r\n\r\nexport default function Toast({ message, type }) {\r\n  const { setIsToaster, isToaster } = useContext(ToasterContext);\r\n  const onToasterClose = () => {\r\n    setIsToaster(false);\r\n  };\r\n  useEffect(() => {\r\n    if (isToaster) {\r\n      setInterval(() => {\r\n        setIsToaster(false);\r\n      }, 5000);\r\n    }\r\n  }, [isToaster, setIsToaster]);\r\n  return (\r\n    <div\r\n      className={`toast show align-items-center text-white bg-${type} border-0 position-absolute top-50 end-0`}\r\n      role=\"alert\"\r\n      aria-live=\"assertive\"\r\n      aria-atomic=\"true\"\r\n    >\r\n      <div className=\"d-flex\">\r\n        <div class=\"toast-body\">{message}</div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn-close btn-close-white  me-2 m-auto\"\r\n          data-bs-dismiss=\"toast\"\r\n          aria-label=\"Close\"\r\n          onClick={onToasterClose}\r\n        ></button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport default function useFormValidator(valueIsValid) {\r\n  const [enteredValue, setEnteredValue] = useState(\"\");\r\n  const [isTouched, setIsTouched] = useState(false);\r\n\r\n  const isValid = valueIsValid(enteredValue);\r\n  const hasError = !isValid && isTouched;\r\n\r\n  const inputChangeHandler = (event) => {\r\n    setEnteredValue(event.target.value);\r\n  };\r\n\r\n  const onBlurHandler = (event) => {\r\n    setIsTouched(true);\r\n  };\r\n\r\n  const reset = () => {\r\n    setEnteredValue(\"\");\r\n    setIsTouched(\"\");\r\n  };\r\n\r\n  return {\r\n    value: enteredValue,\r\n    isValid: isValid,\r\n    hasError,\r\n    inputChangeHandler,\r\n    onBlurHandler,\r\n    setEnteredValue,\r\n    reset,\r\n  };\r\n}\r\n"],"names":["Card","title","children","themeDefault","useSelector","state","theme","className","Loader","type","disabled","role","emailValidator","value","includes","passwordValidator","length","Signup","useState","loader","setLoader","useContext","ToasterContext","isMessage","setIsMessage","isToaster","setIsToaster","submitVisible","setSubmitVisible","useFormValidator","enteredEmail","emailIsValid","isValid","emailInputHasError","hasError","emailChangeHandler","inputChangeHandler","emailBlurHandler","onBlurHandler","emailReset","reset","enteredPaasword","passwordIsValid","passwordInputHasError","passwordChangeHandler","passwordBlurHandler","passwordReset","confirmPaasword","confirmpasswordIsValid","confirmpasswordInputHasError","confirmpasswordChangeHandler","confirmpasswordBlurHandler","confirmpasswordReset","formIsValid","formValue","email","password","returnSecureToken","onSubmit","event","preventDefault","fetch","method","body","JSON","stringify","heders","then","res","ok","json","data","error","message","console","log","htmlFor","id","onChange","onBlur","Toast","style","textAlign","paddingTop","to","useEffect","setInterval","class","onClick","valueIsValid","enteredValue","setEnteredValue","isTouched","setIsTouched","target"],"sourceRoot":""}