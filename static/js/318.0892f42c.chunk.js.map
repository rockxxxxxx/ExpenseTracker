{"version":3,"file":"static/js/318.0892f42c.chunk.js","mappings":"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","sources":["component/modal/Modal.js","component/home/Home.js","component/loader/Loader.js","component/toast/Toast.js","hooks/useFormValidator.js"],"sourcesContent":["import React, { useContext } from \"react\";\r\nimport { ModalContext } from \"../context/modalContext\";\r\n\r\nexport default function Modal({ children, title, isUpdated, isEditing }) {\r\n  const { setIsModal, isModal } = useContext(ModalContext);\r\n  const hideModal = () => {\r\n    setIsModal(false);\r\n  };\r\n\r\n  const onEditing = () => {\r\n    isEditing();\r\n  };\r\n  return (\r\n    <>\r\n      {(isModal || isUpdated) && (\r\n        <div\r\n          className=\"modal-dialog\"\r\n          style={{ width: \"50%\", margin: \"auto\", paddingBottom: \"50px\" }}\r\n        >\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h5\r\n                className=\"modal-title\"\r\n                id=\"staticBackdropLabel\"\r\n                onClick={onEditing}\r\n              >\r\n                {title}\r\n              </h5>\r\n              {!isUpdated && (\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn-close\"\r\n                  data-bs-dismiss=\"modal\"\r\n                  aria-label=\"Close\"\r\n                  onClick={hideModal}\r\n                ></button>\r\n              )}\r\n            </div>\r\n            <div className=\"modal-body\">{children}</div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport useFormValidator from \"../../hooks/useFormValidator\";\r\nimport { ModalContext } from \"../context/modalContext\";\r\nimport { ToasterContext } from \"../context/toasterContext\";\r\nimport Modal from \"../modal/Modal\";\r\nimport \"./home.css\";\r\nimport Loader from \"../loader/Loader\";\r\nimport Toast from \"../toast/Toast\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nvar regex = /(?:https?):(\\w+:?\\w*)?(\\S+)(:\\d+)?(|([\\w#!:.?+=&%!]))?/;\r\nconst nameValidator = (value) => value.length >= 2;\r\nconst photourlValidator = (value) => regex.test(value);\r\nexport default function Home() {\r\n  const { isModal, setIsModal } = useContext(ModalContext);\r\n  const [loader, setLoader] = useState(false);\r\n  const { isMessage, setIsMessage, isToaster, setIsToaster } =\r\n    useContext(ToasterContext);\r\n  const [submitVisible, setSubmitVisible] = useState(true);\r\n  const jwtToken = useSelector((state) => state.auth.jwtToken);\r\n  const [isUpdated, setIsUpdated] = useState(false);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [isEmailVerified, setIsEmailVerified] = useState(false);\r\n\r\n  console.log(jwtToken);\r\n\r\n  const onEdit = () => {\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const completeProfileHandler = () => {\r\n    setIsModal(true);\r\n  };\r\n  const {\r\n    value: enteredName,\r\n    isValid: enteresNameIsValid,\r\n    hasError: enteredNameHasError,\r\n    inputChangeHandler: nameChageHandler,\r\n    onBlurHandler: nameBlurHandler,\r\n    setEnteredValue: setEnteredName,\r\n  } = useFormValidator(nameValidator);\r\n\r\n  const {\r\n    value: enteredPhotoUrl,\r\n    isValid: enteredPhotoUrlIsValid,\r\n    hasError: enteredPhotoInputHasError,\r\n    inputChangeHandler: photoUrlChangeHandler,\r\n    onBlurHandler: photoBlurHandler,\r\n    setEnteredValue: setEnteredPhotoUrl,\r\n  } = useFormValidator(photourlValidator);\r\n\r\n  let formIsValid = false;\r\n  if (enteresNameIsValid && enteredPhotoUrlIsValid) {\r\n    formIsValid = true;\r\n  }\r\n  const formValue = {\r\n    idToken: jwtToken,\r\n    displayName: enteredName,\r\n    photoUrl: enteredPhotoUrl,\r\n    returnSecureToken: true,\r\n  };\r\n\r\n  const onSubmitHandler = (event) => {\r\n    setSubmitVisible(false);\r\n    setLoader(true);\r\n    event.preventDefault();\r\n    if (formIsValid) {\r\n      fetch(\r\n        \"https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyCJx5BaRP2wpkK7EusD5XYqdvO-F3eTyQs\",\r\n        {\r\n          method: \"POST\",\r\n          body: JSON.stringify(formValue),\r\n          heders: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      ).then((response) => {\r\n        if (response.ok) {\r\n          setIsUpdated(true);\r\n          setIsModal(false);\r\n          setLoader(false);\r\n          setSubmitVisible(true);\r\n          setIsToaster(true);\r\n          setIsEditing(false);\r\n          setIsMessage({\r\n            message: \"your profile is successfully update\",\r\n            type: \"success\",\r\n          });\r\n          response.json().then((data) => console.log(data));\r\n        } else {\r\n          setIsToaster(true);\r\n          setIsMessage({\r\n            message: \"Something went wrong. Please try again later\",\r\n            type: \"danger\",\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      setSubmitVisible(true);\r\n      setLoader(false);\r\n      console.log(\"not valid\");\r\n      nameBlurHandler();\r\n      photoBlurHandler();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      \"https://identitytoolkit.googleapis.com/v1/accounts:lookup?key=AIzaSyCJx5BaRP2wpkK7EusD5XYqdvO-F3eTyQs\",\r\n      {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ idToken: jwtToken }),\r\n        heders: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (\r\n          data.users[0].displayName.length ||\r\n          data.users[0].photoUrl.length > 0\r\n        ) {\r\n          setIsUpdated(true);\r\n\r\n          setEnteredName(data.users[0].displayName);\r\n          setEnteredPhotoUrl(data.users[0].photoUrl);\r\n        }\r\n        setIsEmailVerified(data.users[0].emailVerified);\r\n      });\r\n  }, [jwtToken, setEnteredName, setEnteredPhotoUrl]);\r\n\r\n  const verifyEmailPayload = {\r\n    requestType: \"VERIFY_EMAIL\",\r\n    idToken: jwtToken,\r\n  };\r\n  const verifyEmailAddress = () => {\r\n    fetch(\r\n      \"https://identitytoolkit.googleapis.com/v1/accounts:sendOobCode?key=AIzaSyCJx5BaRP2wpkK7EusD5XYqdvO-F3eTyQs\",\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(verifyEmailPayload),\r\n      }\r\n    );\r\n  };\r\n  console.log(isModal);\r\n\r\n  return (\r\n    <>\r\n      {!isEmailVerified && (\r\n        <div\r\n          className=\"mx-auto\"\r\n          style={{ textAlign: \"center\", paddingTop: \"3rem\" }}\r\n        >\r\n          <span className=\"border border-primary p-3 \">\r\n            Your email is not verified.\r\n            <span\r\n              style={{\r\n                color: \"blue\",\r\n                cursor: \"pointer\",\r\n                textDecoration: \"underline\",\r\n              }}\r\n              onClick={() => verifyEmailAddress()}\r\n            >\r\n              Verify it now!\r\n            </span>\r\n          </span>\r\n        </div>\r\n      )}\r\n      {!isUpdated && (\r\n        <div\r\n          className=\"mx-auto\"\r\n          style={{ textAlign: \"center\", paddingTop: \"3rem\" }}\r\n        >\r\n          <span className=\"border border-primary p-3\">\r\n            Your profile is incomplete!\r\n            <span\r\n              style={{\r\n                color: \"blue\",\r\n                cursor: \"pointer\",\r\n                textDecoration: \"underline\",\r\n              }}\r\n              onClick={completeProfileHandler}\r\n            >\r\n              Complete it now\r\n            </span>\r\n          </span>\r\n        </div>\r\n      )}\r\n      {isToaster && <Toast message={isMessage.message} type={isMessage.type} />}\r\n      {(isModal || isUpdated) && (\r\n        <Modal\r\n          title={isUpdated ? \"Edit Profile\" : \"Update Profile\"}\r\n          isUpdated={isUpdated}\r\n          isEditing={() => {\r\n            onEdit();\r\n          }}\r\n        >\r\n          <form onSubmit={onSubmitHandler}>\r\n            <fieldset disabled={isEditing || !isUpdated ? \"\" : \"disabled\"}>\r\n              <div className=\"mb-3\">\r\n                <label htmlFor=\"name\" className=\"form-label\">\r\n                  Full Name\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"name\"\r\n                  aria-describedby=\"nameHelp\"\r\n                  value={enteredName}\r\n                  onChange={nameChageHandler}\r\n                  onBlur={nameBlurHandler}\r\n                />\r\n                <div id=\"update-error\" className=\"form-text\">\r\n                  {enteredNameHasError && \"Please enter a valid name\"}\r\n                </div>\r\n              </div>\r\n              <div className=\"mb-3\">\r\n                <label htmlFor=\"pfurl\" className=\"form-label\">\r\n                  Profile Photo URL\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"pfurl\"\r\n                  value={enteredPhotoUrl}\r\n                  onChange={photoUrlChangeHandler}\r\n                  onBlur={photoBlurHandler}\r\n                />\r\n                <div id=\"update-error\" className=\"form-text\">\r\n                  {enteredPhotoInputHasError && \"Please enter a valid url\"}\r\n                </div>\r\n              </div>\r\n\r\n              {submitVisible && (\r\n                <button type=\"submit\" className=\"btn btn-primary\">\r\n                  Submit\r\n                </button>\r\n              )}\r\n              {loader && <Loader />}\r\n            </fieldset>\r\n          </form>\r\n          <br />\r\n          <img\r\n            src={enteredPhotoUrl}\r\n            alt={enteredName}\r\n            width=\"450px\"\r\n            height=\"200px\"\r\n          />\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./loader.css\";\r\n\r\nexport default function Loader({ title }) {\r\n  return (\r\n    <button className=\"btn btn-primary\" type=\"button\" disabled>\r\n      <span\r\n        className=\"spinner-border spinner-border-sm\"\r\n        role=\"status\"\r\n        aria-hidden=\"true\"\r\n      ></span>\r\n      <span className=\"visually-hidden\">{title}...</span>\r\n    </button>\r\n  );\r\n}\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { ToasterContext } from \"../context/toasterContext\";\r\n\r\nexport default function Toast({ message, type }) {\r\n  const { setIsToaster, isToaster } = useContext(ToasterContext);\r\n  const onToasterClose = () => {\r\n    setIsToaster(false);\r\n  };\r\n  useEffect(() => {\r\n    if (isToaster) {\r\n      setInterval(() => {\r\n        setIsToaster(false);\r\n      }, 5000);\r\n    }\r\n  }, [isToaster, setIsToaster]);\r\n  return (\r\n    <div\r\n      className={`toast show align-items-center text-white bg-${type} border-0 position-absolute top-50 end-0`}\r\n      role=\"alert\"\r\n      aria-live=\"assertive\"\r\n      aria-atomic=\"true\"\r\n    >\r\n      <div className=\"d-flex\">\r\n        <div class=\"toast-body\">{message}</div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn-close btn-close-white  me-2 m-auto\"\r\n          data-bs-dismiss=\"toast\"\r\n          aria-label=\"Close\"\r\n          onClick={onToasterClose}\r\n        ></button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport default function useFormValidator(valueIsValid) {\r\n  const [enteredValue, setEnteredValue] = useState(\"\");\r\n  const [isTouched, setIsTouched] = useState(false);\r\n\r\n  const isValid = valueIsValid(enteredValue);\r\n  const hasError = !isValid && isTouched;\r\n\r\n  const inputChangeHandler = (event) => {\r\n    setEnteredValue(event.target.value);\r\n  };\r\n\r\n  const onBlurHandler = (event) => {\r\n    setIsTouched(true);\r\n  };\r\n\r\n  const reset = () => {\r\n    setEnteredValue(\"\");\r\n    setIsTouched(\"\");\r\n  };\r\n\r\n  return {\r\n    value: enteredValue,\r\n    isValid: isValid,\r\n    hasError,\r\n    inputChangeHandler,\r\n    onBlurHandler,\r\n    setEnteredValue,\r\n    reset,\r\n  };\r\n}\r\n"],"names":["Modal","children","title","isUpdated","isEditing","useContext","ModalContext","setIsModal","isModal","className","style","width","margin","paddingBottom","id","onClick","type","regex","nameValidator","value","length","photourlValidator","test","Home","useState","loader","setLoader","ToasterContext","isMessage","setIsMessage","isToaster","setIsToaster","submitVisible","setSubmitVisible","jwtToken","useSelector","state","auth","setIsUpdated","setIsEditing","isEmailVerified","setIsEmailVerified","console","log","useFormValidator","enteredName","enteresNameIsValid","isValid","enteredNameHasError","hasError","nameChageHandler","inputChangeHandler","nameBlurHandler","onBlurHandler","setEnteredName","setEnteredValue","enteredPhotoUrl","enteredPhotoUrlIsValid","enteredPhotoInputHasError","photoUrlChangeHandler","photoBlurHandler","setEnteredPhotoUrl","formIsValid","formValue","idToken","displayName","photoUrl","returnSecureToken","useEffect","fetch","method","body","JSON","stringify","heders","then","response","json","data","users","emailVerified","verifyEmailPayload","requestType","textAlign","paddingTop","color","cursor","textDecoration","headers","Toast","message","onSubmit","event","preventDefault","ok","disabled","htmlFor","onChange","onBlur","Loader","src","alt","height","role","setInterval","class","valueIsValid","enteredValue","isTouched","setIsTouched","target","reset"],"sourceRoot":""}