{"version":3,"file":"static/js/164.4b6bbeb4.chunk.js","mappings":"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","sources":["component/cards/Card.js","component/loader/Loader.js","component/forgotPassword/ForgotPassword.js","component/login/Login.js","component/toast/Toast.js","hooks/useFormValidator.js"],"sourcesContent":["import React from \"react\";\r\nimport \"./card.css\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nexport default function Card({ title, children }) {\r\n  const themeDefault = useSelector((state) => state.theme.themeDefault);\r\n  return (\r\n    <div\r\n      className={`card ${themeDefault === true ? \"\" : \"text-white bg-dark\"}`}\r\n    >\r\n      <h5 className=\"card-header\">{title}</h5>\r\n      <div className=\"card-body\">{children}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./loader.css\";\r\n\r\nexport default function Loader({ title }) {\r\n  return (\r\n    <button className=\"btn btn-primary\" type=\"button\" disabled>\r\n      <span\r\n        className=\"spinner-border spinner-border-sm\"\r\n        role=\"status\"\r\n        aria-hidden=\"true\"\r\n      ></span>\r\n      <span className=\"visually-hidden\">{title}...</span>\r\n    </button>\r\n  );\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\n\r\nimport useFormValidator from \"../../hooks/useFormValidator\";\r\nimport Card from \"../cards/Card\";\r\n\r\nimport { ToasterContext } from \"../context/toasterContext\";\r\nimport Loader from \"../loader/Loader\";\r\nimport Toast from \"../toast/Toast\";\r\nimport \"../login/login.css\";\r\n\r\nconst emailValidator = (value) => value.includes(\"@\");\r\n\r\nexport default function ForgotPassword({ reset }) {\r\n  const [loader, setLoader] = useState(false);\r\n  const { isMessage, setIsMessage, isToaster, setIsToaster } =\r\n    useContext(ToasterContext);\r\n  const [submitVisible, setSubmitVisible] = useState(true);\r\n  const {\r\n    value: enteredEmail,\r\n    isValid: emailIsValid,\r\n    hasError: emailInputHasError,\r\n    inputChangeHandler: emailChangeHandler,\r\n    onBlurHandler: emailBlurHandler,\r\n    reset: emailReset,\r\n  } = useFormValidator(emailValidator);\r\n\r\n  let formIsValid = false;\r\n  if (emailIsValid) {\r\n    formIsValid = true;\r\n  }\r\n  const formValue = {\r\n    requestType: \"PASSWORD_RESET\",\r\n    email: enteredEmail,\r\n  };\r\n  function onSubmitHandler(event) {\r\n    setSubmitVisible(false);\r\n    setLoader(true);\r\n    event.preventDefault();\r\n    if (formIsValid) {\r\n      setLoader(true);\r\n      fetch(\r\n        \"https://identitytoolkit.googleapis.com/v1/accounts:sendOobCode?key=AIzaSyCJx5BaRP2wpkK7EusD5XYqdvO-F3eTyQs\",\r\n        {\r\n          method: \"POST\",\r\n          body: JSON.stringify(formValue),\r\n          heders: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      )\r\n        .then((res) => {\r\n          setSubmitVisible(true);\r\n          setLoader(false);\r\n          if (res.ok) {\r\n            setIsMessage({\r\n              message: \"You have successfully Logged in\",\r\n              type: \"success\",\r\n            });\r\n            setIsToaster(true);\r\n            emailReset();\r\n            return res.json();\r\n          } else {\r\n            return res.json().then((data) => {\r\n              setIsMessage({\r\n                message: \"Email or Password is wrong\",\r\n                type: \"danger\",\r\n              });\r\n              setIsToaster(true);\r\n            });\r\n          }\r\n        })\r\n        .then((data) => {\r\n          localStorage.setItem(\"auth_token\", data.idToken);\r\n          localStorage.setItem(\"email\", data.email);\r\n        });\r\n    } else {\r\n      setSubmitVisible(true);\r\n      setLoader(false);\r\n      emailBlurHandler();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container login\">\r\n        <Card title=\"Login\">\r\n          <form onSubmit={onSubmitHandler}>\r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"email\" className=\"form-label\">\r\n                Email address\r\n              </label>\r\n              <input\r\n                type=\"email\"\r\n                className=\"form-control\"\r\n                id=\"email\"\r\n                aria-describedby=\"emailHelp\"\r\n                value={enteredEmail}\r\n                onChange={emailChangeHandler}\r\n                onBlur={emailBlurHandler}\r\n              />\r\n              <div id=\"login-error\" className=\"form-text\">\r\n                {emailInputHasError && \"Please enter a valid email address\"}\r\n              </div>\r\n            </div>\r\n\r\n            {submitVisible && (\r\n              <button type=\"submit\" className=\"btn btn-primary\">\r\n                Submit\r\n              </button>\r\n            )}\r\n            {loader && <Loader />}\r\n          </form>\r\n        </Card>\r\n        {isToaster && (\r\n          <Toast message={isMessage.message} type={isMessage.type} />\r\n        )}\r\n      </div>\r\n      <div\r\n        className=\"mx-auto\"\r\n        style={{ textAlign: \"center\", paddingTop: \"3rem\" }}\r\n      >\r\n        <span className=\"border border-primary p-3\">\r\n          <span\r\n            style={{\r\n              color: \"blue\",\r\n              cursor: \"pointer\",\r\n              textDecoration: \"underline\",\r\n            }}\r\n            onClick={() => reset(false)}\r\n          >\r\n            Click here\r\n          </span>\r\n          to login\r\n        </span>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\nimport { NavLink, useNavigate } from \"react-router-dom\";\r\nimport useFormValidator from \"../../hooks/useFormValidator\";\r\nimport Card from \"../cards/Card\";\r\nimport { ToasterContext } from \"../context/toasterContext\";\r\nimport Loader from \"../loader/Loader\";\r\nimport Toast from \"../toast/Toast\";\r\nimport \"./login.css\";\r\nimport ForgotPassword from \"../forgotPassword/ForgotPassword\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { login } from \"../../reducers/authReducr\";\r\n\r\nconst emailValidator = (value) => value.includes(\"@\");\r\nconst passwordValidator = (value) => value.length > 6;\r\n\r\nexport default function Login() {\r\n  const navigate = useNavigate();\r\n  const [loader, setLoader] = useState(false);\r\n  const { isMessage, setIsMessage, isToaster, setIsToaster } =\r\n    useContext(ToasterContext);\r\n  const [submitVisible, setSubmitVisible] = useState(true);\r\n  const [isResetPassword, setIsResetpassword] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const {\r\n    value: enteredEmail,\r\n    isValid: emailIsValid,\r\n    hasError: emailInputHasError,\r\n    inputChangeHandler: emailChangeHandler,\r\n    onBlurHandler: emailBlurHandler,\r\n    reset: emailReset,\r\n  } = useFormValidator(emailValidator);\r\n\r\n  const {\r\n    value: enteredPaasword,\r\n    isValid: passwordIsValid,\r\n    inputChangeHandler: passwordChangeHandler,\r\n    onBlurHandler: passwordBlurHandler,\r\n    reset: passwordReset,\r\n  } = useFormValidator(passwordValidator);\r\n\r\n  let formIsValid = false;\r\n  if (emailIsValid && passwordIsValid) {\r\n    formIsValid = true;\r\n  }\r\n  const formValue = {\r\n    email: enteredEmail,\r\n    password: enteredPaasword,\r\n    returnSecureToken: true,\r\n  };\r\n  function onSubmitHandler(event) {\r\n    setSubmitVisible(false);\r\n    setLoader(true);\r\n    event.preventDefault();\r\n    if (formIsValid) {\r\n      setLoader(true);\r\n      fetch(\r\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCJx5BaRP2wpkK7EusD5XYqdvO-F3eTyQs\",\r\n        {\r\n          method: \"POST\",\r\n          body: JSON.stringify(formValue),\r\n          heders: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      )\r\n        .then((res) => {\r\n          setSubmitVisible(true);\r\n          setLoader(false);\r\n          if (res.ok) {\r\n            setIsMessage({\r\n              message: \"You have successfully Logged in\",\r\n              type: \"success\",\r\n            });\r\n            setIsToaster(true);\r\n            emailReset();\r\n            passwordReset();\r\n            navigate(\"/home\");\r\n            return res.json();\r\n          } else {\r\n            return res.json().then((data) => {\r\n              setIsMessage({\r\n                message: \"Email or Password is wrong\",\r\n                type: \"danger\",\r\n              });\r\n              setIsToaster(true);\r\n            });\r\n          }\r\n        })\r\n        .then((data) => {\r\n          dispatch(\r\n            login({\r\n              isLoggedIn: true,\r\n              jwtToken: data.idToken,\r\n              userEmail: data.email,\r\n            })\r\n          );\r\n          //setJwtToken(data.idToken);\r\n          //setUserEmail(data.email);\r\n          localStorage.setItem(\"auth_token\", data.idToken);\r\n          localStorage.setItem(\"email\", data.email);\r\n        });\r\n    } else {\r\n      setSubmitVisible(true);\r\n      setLoader(false);\r\n      emailBlurHandler();\r\n      passwordBlurHandler();\r\n    }\r\n  }\r\n  const updateCount = useSelector((state) => state.auth);\r\n  console.log(updateCount);\r\n\r\n  return (\r\n    <>\r\n      {!isResetPassword && (\r\n        <>\r\n          <div className=\"container login\">\r\n            <Card title=\"Login\">\r\n              <form onSubmit={onSubmitHandler}>\r\n                <div className=\"mb-3\">\r\n                  <label htmlFor=\"email\" className=\"form-label\">\r\n                    Email address\r\n                  </label>\r\n                  <input\r\n                    type=\"email\"\r\n                    className=\"form-control\"\r\n                    id=\"email\"\r\n                    aria-describedby=\"emailHelp\"\r\n                    value={enteredEmail}\r\n                    onChange={emailChangeHandler}\r\n                    onBlur={emailBlurHandler}\r\n                  />\r\n                  <div id=\"login-error\" className=\"form-text\">\r\n                    {emailInputHasError && \"Please enter a valid email address\"}\r\n                  </div>\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                  <label htmlFor=\"password\" className=\"form-label\">\r\n                    Password\r\n                  </label>\r\n                  <input\r\n                    type=\"password\"\r\n                    className=\"form-control\"\r\n                    id=\"password\"\r\n                    value={enteredPaasword}\r\n                    onChange={passwordChangeHandler}\r\n                    onBlur={passwordBlurHandler}\r\n                  />\r\n                </div>\r\n\r\n                {submitVisible && (\r\n                  <button type=\"submit\" className=\"btn btn-primary\">\r\n                    Submit\r\n                  </button>\r\n                )}\r\n                {loader && <Loader />}\r\n              </form>\r\n            </Card>\r\n            {isToaster && (\r\n              <Toast message={isMessage.message} type={isMessage.type} />\r\n            )}\r\n          </div>\r\n          <div\r\n            className=\"mx-auto\"\r\n            style={{ textAlign: \"center\", paddingTop: \"3rem\" }}\r\n          >\r\n            <span className=\"border border-primary p-3\">\r\n              Don't have an account? <NavLink to=\"/signup\">Signup</NavLink>\r\n            </span>\r\n            <span className=\"border border-primary p-3\">\r\n              Frogot Password??\r\n              <span\r\n                style={{\r\n                  color: \"blue\",\r\n                  cursor: \"pointer\",\r\n                  textDecoration: \"underline\",\r\n                }}\r\n                onClick={() => setIsResetpassword(true)}\r\n              >\r\n                Click here\r\n              </span>\r\n              to reset!\r\n            </span>\r\n          </div>\r\n        </>\r\n      )}\r\n      {isResetPassword && (\r\n        <ForgotPassword reset={() => setIsResetpassword(false)} />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { ToasterContext } from \"../context/toasterContext\";\r\n\r\nexport default function Toast({ message, type }) {\r\n  const { setIsToaster, isToaster } = useContext(ToasterContext);\r\n  const onToasterClose = () => {\r\n    setIsToaster(false);\r\n  };\r\n  useEffect(() => {\r\n    if (isToaster) {\r\n      setInterval(() => {\r\n        setIsToaster(false);\r\n      }, 5000);\r\n    }\r\n  }, [isToaster, setIsToaster]);\r\n  return (\r\n    <div\r\n      className={`toast show align-items-center text-white bg-${type} border-0 position-absolute top-50 end-0`}\r\n      role=\"alert\"\r\n      aria-live=\"assertive\"\r\n      aria-atomic=\"true\"\r\n    >\r\n      <div className=\"d-flex\">\r\n        <div class=\"toast-body\">{message}</div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn-close btn-close-white  me-2 m-auto\"\r\n          data-bs-dismiss=\"toast\"\r\n          aria-label=\"Close\"\r\n          onClick={onToasterClose}\r\n        ></button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport default function useFormValidator(valueIsValid) {\r\n  const [enteredValue, setEnteredValue] = useState(\"\");\r\n  const [isTouched, setIsTouched] = useState(false);\r\n\r\n  const isValid = valueIsValid(enteredValue);\r\n  const hasError = !isValid && isTouched;\r\n\r\n  const inputChangeHandler = (event) => {\r\n    setEnteredValue(event.target.value);\r\n  };\r\n\r\n  const onBlurHandler = (event) => {\r\n    setIsTouched(true);\r\n  };\r\n\r\n  const reset = () => {\r\n    setEnteredValue(\"\");\r\n    setIsTouched(\"\");\r\n  };\r\n\r\n  return {\r\n    value: enteredValue,\r\n    isValid: isValid,\r\n    hasError,\r\n    inputChangeHandler,\r\n    onBlurHandler,\r\n    setEnteredValue,\r\n    reset,\r\n  };\r\n}\r\n"],"names":["Card","title","children","themeDefault","useSelector","state","theme","className","Loader","type","disabled","role","emailValidator","value","includes","ForgotPassword","reset","useState","loader","setLoader","useContext","ToasterContext","isMessage","setIsMessage","isToaster","setIsToaster","submitVisible","setSubmitVisible","useFormValidator","enteredEmail","emailIsValid","isValid","emailInputHasError","hasError","emailChangeHandler","inputChangeHandler","emailBlurHandler","onBlurHandler","emailReset","formIsValid","formValue","requestType","email","onSubmit","event","preventDefault","fetch","method","body","JSON","stringify","heders","then","res","ok","message","json","data","localStorage","setItem","idToken","htmlFor","id","onChange","onBlur","Toast","style","textAlign","paddingTop","color","cursor","textDecoration","onClick","passwordValidator","length","Login","navigate","useNavigate","isResetPassword","setIsResetpassword","dispatch","useDispatch","enteredPaasword","passwordIsValid","passwordChangeHandler","passwordBlurHandler","passwordReset","password","returnSecureToken","updateCount","auth","console","log","login","isLoggedIn","jwtToken","userEmail","to","useEffect","setInterval","class","valueIsValid","enteredValue","setEnteredValue","isTouched","setIsTouched","target"],"sourceRoot":""}